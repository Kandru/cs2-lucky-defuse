using System.Drawing;
using System.Security.Cryptography;
using System.Text.Json.Serialization;
using CounterStrikeSharp.API;
using CounterStrikeSharp.API.Core;
using CounterStrikeSharp.API.Modules.Entities.Constants;
using CounterStrikeSharp.API.Modules.Utils;

namespace LuckyDefusePlugin;

public class PluginConfig : BasePluginConfig
{
}

public class LuckyDefusePlugin : BasePlugin, IPluginConfig<PluginConfig>
{
    public override string ModuleName => "Lucky Defuse Plugin";
    public override string ModuleVersion => "1.0.0";

    public PluginConfig Config { get; set; }
    
    private readonly Color[] _colors =
    [
        Color.Cyan, Color.Magenta , Color.Yellow, Color.Black
    ];
    private readonly List<long> _entIds = [];
    private CPlantedC4? _bomb;
    private CCSPlayerController? _player;
    
    public void OnConfigParsed(PluginConfig? config)
    {
        if (config == null) return;
        Config = config;
    }
    
    public override void Load(bool hotReload)
    {
        RegisterEventHandler<EventBombPlanted>((@event, _) =>
        {
            _entIds.Clear();
            
            var bombs = Utilities.FindAllEntitiesByDesignerName<CPlantedC4>("planted_c4");
            var bomb = bombs.First();
            _bomb = bomb;
            _player = @event.Userid;
            
            //SpawnTargets(bomb.AbsOrigin!);
            return HookResult.Continue;
        });

        RegisterEventHandler<EventEntityKilled>((@event, _) =>
        {
            if (!_entIds.Any() || !_entIds.Contains(@event.EntindexKilled)) return HookResult.Continue;
            var r = Random.Shared.Next(_colors.Length - 1);
            if (r == 0) DefuseBomb();
            else DefuseBomb();
            _entIds.Clear();
            return HookResult.Continue;
        });
    }
    
    private void SpawnTargets(Vector origin)
    {
        for (int i = 0; i < _colors.Length; ++i)
        {
            var prop = Utilities.CreateEntityByName<CPhysicsPropOverride>("prop_physics_override")!;
            if (prop.AbsOrigin == null || prop.AbsRotation == null || !prop.IsValid)
            {
                Console.WriteLine("[LuckyDefusePlugin][ERROR] Could not spawn entity!");
                return;
            }
            prop.AbsOrigin.X = origin.X;
            prop.AbsOrigin.Y = origin.Y;
            prop.AbsOrigin.Z = origin.Z + 64 + (i*40);
            prop.Render = _colors[i];
            prop.Health = 100;
            prop.Spawnflags = 2047; // motion disabled completely
            prop.SetModel("models/dev/dev_cube.vmdl");
            prop.DispatchSpawn();
            _entIds.Add(prop.EntityHandle.Index);
        }
    }

    private void DefuseBomb()
    {
        if (_bomb == null || _player == null || !_bomb.IsValid) return;
        var gameRules = Utilities.FindAllEntitiesByDesignerName<CCSGameRulesProxy>("cs_gamerules").First();
        /*gameRules.BombDefused = true;
        _bomb.BombDefused = true;
        _bomb.DefuseCountDown = 0f;
        _bomb.BeingDefused = true;
        _bomb.BombTicking = false;
        
        var eventPtr = NativeAPI.CreateEvent("bomb_begindefuse", true);
        NativeAPI.SetEventPlayerController(eventPtr, "userid", _player.Handle);
        NativeAPI.SetEventBool(eventPtr, "haskit", true);
        NativeAPI.FireEvent(eventPtr, false);*/
        
        /*Server.NextFrame(() =>
        {
            var eventPtr = NativeAPI.CreateEvent("round_end", true);
            NativeAPI.SetEventInt(eventPtr, "winner", 1);
            NativeAPI.SetEventInt(eventPtr, "reason", 0);
            NativeAPI.SetEventString(eventPtr, "message", "test");
            NativeAPI.SetEventInt(eventPtr, "legacy", 0);
            NativeAPI.SetEventInt(eventPtr, "player_count", 0);
            NativeAPI.SetEventInt(eventPtr, "nomusic", 0);
            NativeAPI.FireEvent(eventPtr, false);
        });*/
        
        /*var ents = Utilities.FindAllEntitiesByDesignerName<CBombTarget>("func_bomb_target");
        foreach (var ent in ents)
        {
            ent.Remove();
        }*/

        /*gameRules.GameRules!.TerminateRound(5f, RoundEndReason.CTsWin);
        gameRules.GameRules!.AccountCT++;
        gameRules.GameRules!.TotalRoundsPlayed++;
        _player.Team.*/
        
        Server.PrintToChatAll("defused");
    }

    private void Boooom()
    {
        if (_bomb == null || !_bomb.IsValid) return;
        _bomb.C4Blow = 1f;
        Server.PrintToChatAll("well shit");
    }
}